// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var EUI, KeyFetcher, KeyManagerInterface, SignatureEngineInterface,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  KeyFetcher = require('./keyfetch').KeyFetcher;

  EUI = new Error("not implemented");

  exports.KeyManagerInterface = KeyManagerInterface = (function(_super) {
    __extends(KeyManagerInterface, _super);

    function KeyManagerInterface() {}

    KeyManagerInterface.prototype.get_pgp_fingerprint = function() {
      return null;
    };

    KeyManagerInterface.prototype.get_ekid = function() {
      return null;
    };

    KeyManagerInterface.prototype.get_fp2 = function() {
      return null;
    };

    KeyManagerInterface.prototype.get_fp2_formatted = function() {
      return null;
    };

    KeyManagerInterface.prototype.get_type = function() {
      return null;
    };

    KeyManagerInterface.prototype.check_public_eq = function(km2) {
      return this.EUI;
    };

    KeyManagerInterface.prototype.get_userids = function() {
      return [];
    };

    KeyManagerInterface.prototype.get_primary_keypair = function() {
      return null;
    };

    KeyManagerInterface.prototype.get_all_pgp_key_materials = function() {
      return [];
    };

    KeyManagerInterface.prototype.get_userids_mark_primary = function() {
      return [];
    };

    KeyManagerInterface.prototype.make_sig_eng = function() {
      return null;
    };

    KeyManagerInterface.prototype.export_public = function(_arg, cb) {
      var asp, regen;
      asp = _arg.asp, regen = _arg.regen;
      return cb(EUI, null);
    };

    KeyManagerInterface.prototype.can_verify = function() {
      return false;
    };

    return KeyManagerInterface;

  })(KeyFetcher);

  exports.SignatureEngineInterface = SignatureEngineInterface = (function() {
    function SignatureEngineInterface(_arg) {
      this.km = _arg.km;
    }

    SignatureEngineInterface.prototype.get_km = function() {
      return this.km;
    };

    SignatureEngineInterface.prototype.box = function(msg, cb) {
      return cb(EUI);
    };

    SignatureEngineInterface.prototype.unbox = function(msb, cb) {
      return cb(EUI);
    };

    return SignatureEngineInterface;

  })();

}).call(this);
